Bemerkingen op de opgave:

Met de huidige data is jet niet mogelijk om iets te kunnen zeggen over de invloed van de verdeling van de items over de tray op het order debiet van de opstelling.
Dit vanwege volgende redenen. We hebben geen info over hoe lang de neemtijd is in een specifieke situatie. Hierdoor kunnen we geen onderscheid maken tussen een pikker 
die gelijk welk item uit een tray kan pakken omdat ze allemaal identiek zijn en een pikker die eerst het juiste item moet zoeken in de random collectie van items. 
Verder zou de overhead vooral te naar boven komen bij het vullen van de trays, aangezien het systeem moet weten waar items zich bevinden. Dus of worden de items 
op een vaste plaats gelegd en moet de vuller de nodige items aan zoeken of worden items willekeurig geplaatst en moeten die op één of andere wijze nog in het systeem 
aan de tray gelinkt worden. 
Men zou kunnen stellen dat in realistische situaties er slechts één tot tien verschillende items per tray geplaatst zullen worden en 
dat de pikker na een tijd wel vertrouwd zal zijn met de opstelling. Uit mondelinge overgave horen we echter dat zo'n VLM weliswaar altijd propvol zitten dus veronderstellen 
we dat gestructureerde trays zelden aan de orde is. Bovendien zal de verhouding trays en aantal items hier ook een sterke invloed op hebben plus de frequentie waaraan de
stock verandert. Als deze laatste regelmatig verandert valt er ook weinig vertrouwdheid mee op te bouwen.
Verder is het zonder de picker data niet zinnig om de vergelijking te maken want een opstelling met random gevulde trays zal gemiddelde altijd een groter debiet hebben. 
We stellen dit omdat de kans dat een tray ook een item voor de volgende order bevat gaat omhoog met het aantal items in de tray. Slechts als het volgende order hetzelfde item
nodig heeft kan een tray met één soort blijven staan terwijl een tray met alle soorten items steeds kan blijven totdat een item nodig is dat op is.

Verder zijn we van mening dat het niet zinvol is meerdere strategieën te bekijken die de neem- en terugplaatslokaties stipuleren. Zoals eerder al vermeld zijn in quasi 
alle gevallen de liften vol gepropt en is er dus geen ruimte om trays te wisselen of te herverdelen.

// KLOPT niet peisk
//Dit deel van de opdracht loopt ook vast op een ander aspect van de situatie.
//Als output vallen er twee resultaten te vergelijken: het aantal orders per uur of het aantal uur voor N orders. Hoewel ze hetzelfde lijken uit te drukken hebben ze een andere insteek.
//Voor beide situaties kunnen we uitgaan van eenzelfde toestroom van orders waarbij het tijdsintervat tussen order volgens een zekere poisson verdeling verloopt.
//Voor de eerste situatie moet er dan een begin staat gekozen worden.



Over de opvullingen van de trays:
Heel vaak maar 1 item. hoe het eruit ziet is dat er precies met een emmer van random stukken is gevuld. dus heel veel unieke items maar heel weinig van elk item.
Deze volgt normale/chi² verdeling.

We gebruiken inventory data niet. probleem is dat er geen tijden instaan en geen enkele parent container ovreeent aast komt!
Check gedaan. er is amper correlatie tussen de verschillende items in een order.

Over de orders: zoals verwacht: dikke exponentiele voor de individuele orders.
Binnen een order: eig ook nooit correlatie


# Data
Er zijn heel wat verschillende opstellingen in de data, het grootste aantal (37%) van de rijen is OSR. De grootste 13 bevatten 57% van alle rijen.
We hebben gekozen om rijen te groeperen volgens location code en het interval tussen opeenvolgende wijzegingen van tasks te beschouwen als de picktijd.
Een andere logische keuze zou de line numbers zijn maar bij het uitzetten van de histogram van de intervallen, is duidelijk te zien dat de verdeling 
een combinatie van verschillende verdelingen is. 

Aangezien een heel aantal intervallen rond de nul seconden lang is hebben we voorlopig enkel intervallen groter of gelijk één seconde beschouwt. Voor de grootste, OSR, 
is de verdeling duidlijk niet poission verdeelt (*aantonen). Voor de PTL-NEST opstellingen is de verdeling wel poission (*aantonen).
De OSR lijkt ons een realistischere verdeling voor de picker bij de VLM aangezien we steeds een zekere hoeveelheid tijd verwachten voor het picken van een item. Verdere 
analyse geeft aan dat de piek in de verdleing normaal verdeelt is. Aan de Q-Q plot kunnen we zien dat deze vaststelling alleen geld voor 
de piek en niet voor punten verder dan 2 à 3 standaard afwijkingen van het gemiddelde. We zien hier enkele potentiele verklaringen voor. De eerste 
verklaring is dat sommige items zwaarder zijn of dat er meerdere items tegelijk worden gepickt en dat hierdoor de picktijd iets langer is. We zien 
echter voor beide situaties geen bewijs dat de picktijd omhoog gaat proportioneel met het gewicht of het aantal items. Hoewel dat de clustering van punten een combinatie 
van verschillende verdelingen doet vermoeden, zien we niet hoe we deze uit elkaar zouden kunnen halen. Aangezien ongeveer 75% van de data punten binnen de normaal verdleing 
valt vinden we het ok om binnen deze verklaring de overige 25% van de data punten te laten vallen.
Een andere verklaring is dat een bak of een order even op zich laat wachten. 
De opstelling van een OSR systeem doet vermoeden dat er steeds een buffer is maar als er op een moment nog geen order is en dus ook geen bak om uit te pikken kan het interval 
hoger dan normaal oplopen. Aangezien dit niet het effect is van de picktijd en dus gemodelleerd is door andere delen van het systeem, kunnen we ook binnen deze verkalring 
deze punten buiten beschouwing laten.
Dus tenzij er twee items tegelijk genomen kunnen worden, zal het interval nooit nul zijn. En als twee items tegelijk genomen kunnen worden dan is dit iets om in de 
simulatie te verwerken.
De interval data uit de OSR 

Enkel incoming houden we inrekening om niet alle intervallen tussen incoming en outgoing van dezelfde task in data te steken maar er zijn ook bizarre gevallen 
waar enkel de één of ander in de lijst staat. Dus misschien moeten we filteren op* outgoing ipv incoming


Verder hebben we een aantal vaststellingen gedaan rond de combinaties van items.

als we er van uit gaan dat item codes op items slaan en task number




info over de data:
Outbound order number en picklist number zijn paarsgewijs altijd hetzelfde
Stock product id en item code ook
Task number slaat op het picken van 1 soort item -> kan dus meerdere keren voorkomen maar altijd voor hetzelfde type item. (heeft dan een verschillend sequence number)
Location code is de "machine", parent container zal de bak zijn.
Outbound orders doet wel vermoeden dat er vaak meerdere items samen worden besteld. Er zijn +-21k paren die meer dan 30 keer voorkomen. Hoe items die meerdere 
keren voorkomen in dezelfde order gemodeleerd moeten worden is me nog een vraagteken.
'Last Changed Dt' is hoogtens 0.33s later dan 'Creation Dt'
De Inventory Qty gaan vanuit dat is "hoevveel haalt ge uit die parent container"

TODO: haal negatieve item bug eruit!!

Experimenten als welke eerst enzo....
Pas de GUI aan zodat duidleijk is als trays "aan het wachten zijn op een picker!!"
De lift geen 7 meter hoog maken!!!!!!! <---
Manneken in de gui duidelijk maken als hij stapt
Zet de lifen geen 40 meter uit elkaar
lift travel time erin steken
De Inventory Qty gaan vanuit dat is "hoeveel haalt ge uit die parent container"


incrementeel orde opstellen 
Een item kiezen en dan random een van de items uit de gekozen items kiezen 


Meerdere liften:
Initieel werden elke lift een eigen instructie toegekend. Deze gingen samen hun tray gaan halen leverden de ene na de andere de tray 
af en plaatsten ze dan samen terug weg. Echter als er meerdere items uit een tray gehaald kunnen worden, dan moet direct ook geweten 
zijn over welke orders het gaat, want anders heeft geen zin om de volgende instructie aan de tweede lift toe te kennen als het item net 
zo goed uit de tray van de eerste lift gehaald kan worden. Er moet dus vooruit gekeken worden naar de volgende items. Echter in onze 
data zien we dat veel intervallen tussen gelogde pick momenten quasi nul zijn. Het lijkt ons dan ook logisch om voor items die uit 
dezelfde tray gepickt zijn, slechts één keer de picktijd aan te rekenen. Zo komt de verdeling van de gegenereerde punten overeen 
met de data.

Deze bemerking doet ons heel het probleem verder abstraheren. De data laat geen onderscheid tussen een tray waar veel uit genomen 
wordt en een waar weinig uit genomen wordt, op vlak van picktijd. We kennen de verdeling van het aantal items in een order. Wat is 
de waarschijnlijkheid dat een tray nog de nodige items bevat voor een reeks instructies? De trays bevatten random verdeling aan items.
De kans dat een item nog in een tray te vinden is, is dus dalend met de tijd, want afhankelijk van het aantal items dat er iedere keer 
wordt uit gepickt. We zouden voor elk item een kans kunnen bijhouden dat deze nog in de tray ligt. Iedere keer als er iets uit de tray 
wordt gepickt gaat de kans naar beneden met een zekere waarde. Deze waarde is bepaald door de kans dat een item in een order zit en 
hoeveel van het item nodig zijn.


We willen ook nog proberen om te kijken wanneer plateaut de verbetering? (aantal vlms. duplciaten van dezelfde vlms!)
arbiter: order van vlms randomizen

We kunnen met pickdata per picker successvol de picktijden achterhalen per item, maar er is vaak te weinig data.
Oplossing: we gebruiken een verdeling van alle items hun picktijd.

combinatie testen; 1 vlm 1 lift, 2 vlm 2 lift

A method for when determning to stop generating new data